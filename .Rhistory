human_activity_participant1 <- all_data_participant1 %>% filter(player == "0")
print(human_activity_participant1)
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table(style = "simple")
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
library(plyr)
library(dplyr)
library(ggplot2)
library(pander)
library(scales)
library(RJSONIO)
library(jsonlite)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
distinct(scenario.id, scenario) %>%
pandoc.table()
pandoc.table(table(study_data$scenario))
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
theme_bw() +
ggtitle("Data collection across time")
my_limits  = as.POSIXct(c("15/09/2020 06:22", "30/09/2020 06:22"),format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 16) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  my_limits)
start <- as.POSIXct("20/09/2020 00:00",format="%d/%m/%Y %H:%M")
end <- as.POSIXct("24/09/2020 23:59",format="%d/%m/%Y %H:%M")
study_data <- study_data %>%
filter(between(dates, start, end))
paste(nrow(study_data), "paticipants left")
glimpse(study_data$user.id)
study_data %>%
mutate(sex = replace(sex, sex == "", "no response")) %>%
group_by(sex) %>%
mutate(group_count = n()) %>%
ungroup() %>%
mutate(sex_count = paste0(sex, "; n=", group_count)) %>%
ggplot() +
geom_density(aes(age)) +
facet_wrap(~sex_count) +
theme_bw() +
ggtitle("Demographics in example study")
study_data %>%
mutate(avatar = replace(avatar, avatar == "", "missing")) %>%
ggplot() +
geom_bar(aes(avatar)) +
theme_bw() +
ggtitle("Popularity of avatars in example study")
TRUNCATE <- 296
first_entry <- paste0(substr(study_data$play.events[1], 1, TRUNCATE), "]")
print(first_entry)
prettify(first_entry)
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
tail(all_data_participant1)
cat("Number thows")
pandoc.table((table(all_data_participant1$from)))
cat("\nNumber receptions")
pandoc.table(table(all_data_participant1$to))
all_data_participant1 %>%
filter(to == "0") %>%
pandoc.table()
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
#custom function for counting waves
count_waves_human <- function(play.events.cell){
#cannot count waves if no game was played
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)
}
#transform cell to df
cell_contents_df <- fromJSON(play.events.cell) %>% as.data.frame
#if no player waves, the 'player' column will be omitted
if(! "player" %in% colnames(cell_contents_df)){
return(0)
}
#otherwise simply count the occurrence of the target behavior
sum(cell_contents_df$type == "wave" & cell_contents_df$player == "0")
}
#count waves from all participants
study_data$waves <- unlist(lapply(study_data$play.events, count_waves_human), use.names = FALSE)
#inspect new waves variable
summary(study_data$waves)
survey_data <- list()
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
#check if questionnaire data is available for current row
valid <- isValidJSON(study_data$questionnaire.answers[i], TRUE)
#add data to list
if(valid){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i]] <- as.data.frame(participant_answers)
#or add NA to list
}else{
survey_data[[i]] <-data.frame(NA)
}
}
#combine all questionnaire answers into one dataframe (rows = participants; columns = questions)
survey_data <- rbind.fill(survey_data)
survey_data <- sapply(survey_data, function(x)all(is.na(x)))
#survey_data$NA. <- NULL
survey_data <- list()
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
#check if questionnaire data is available for current row
valid <- isValidJSON(study_data$questionnaire.answers[i], TRUE)
#add data to list
if(valid){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i]] <- as.data.frame(participant_answers)
#or add NA to list
}else{
survey_data[[i]] <-data.frame("Missing_data" = TRUE)
}
}
#combine all questionnaire answers into one dataframe (rows = participants; columns = questions)
survey_data <- rbind.fill(survey_data)
View(survey_data)
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 16) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(date_breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks="1 day", labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), binwidth = binwidth = 1*3600*24) +
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), binwidth = 1*3600*24) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks="1 day", labels=date_format("%d/%m"), limits =  c(start, end))
library(devtools)
install.packages("devtools")
library(devtools)
install_github("https://github.com/salim-b/pkgpurl")
library(pkgpurl)
setwd("~/Projects/socialball erdem")
lint_rmd("markdown for erdem")
lint_rmd("markdown for erdem.Rmd")
install.packages("PMCMRPlus")
install.packages("PMCMRplus")
install.packages("ggside")
library(plyr)
library(dplyr)
library(ggplot2)
library(pander)
library(scales)
library(RJSONIO)
library(jsonlite)
study_data <- read.csv2("socialball_CM_20210707.csv")
library(plyr)
library(dplyr)
library(ggplot2)
library(pander)
library(scales)
library(RJSONIO)
library(jsonlite)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
distinct(scenario.id, scenario) %>%
pandoc.table()
pandoc.table(table(study_data$scenario))
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), color = 1, fill = "white") +
theme_bw() +
ggtitle("Data collection across time")
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), binwidth = 1*3600*24, color = 1, fill = "white") +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks="1 day", labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("20/09/2020 00:00",format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("24/09/2020 23:59",format="%d/%m/%Y %H:%M")
study_data <- study_data %>%
filter(between(dates, start, end))
paste(nrow(study_data), "paticipants left")
glimpse(study_data$user.id)
study_data %>%
mutate(sex = replace(sex, sex == "", "no response")) %>%
group_by(sex) %>%
mutate(group_count = n()) %>%
ungroup() %>%
mutate(sex_count = paste0(sex, "; n=", group_count)) %>%
ggplot() +
geom_density(aes(age)) +
facet_wrap(~sex_count) +
theme_bw() +
ggtitle("Demographics in example study")
study_data %>%
mutate(avatar = replace(avatar, avatar == "", "missing")) %>%
ggplot() +
geom_bar(aes(avatar), color = 1, fill = "white") +
theme_bw() +
ggtitle("Popularity of avatars in example study")
TRUNCATE <- 296
first_entry <- paste0(substr(study_data$play.events[1], 1, TRUNCATE), "]")
print(first_entry)
prettify(first_entry)
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
tail(all_data_participant1)
cat("Number thows")
pandoc.table((table(all_data_participant1$from)))
cat("\nNumber receptions")
pandoc.table(table(all_data_participant1$to))
all_data_participant1 %>%
filter(to == "0") %>%
pandoc.table()
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
#custom function for counting waves
count_waves_human <- function(play.events.cell){
#cannot count waves if no game was played
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)
}
#transform cell to df
cell_contents_df <- fromJSON(play.events.cell) %>% as.data.frame
#if no player waves, the 'player' column will be omitted
if(! "player" %in% colnames(cell_contents_df)){
return(0)
}
#otherwise simply count the occurrence of the target behavior
sum(cell_contents_df$type == "wave" & cell_contents_df$player == "0")
}
#count waves from all participants
study_data$waves <- unlist(lapply(study_data$play.events, count_waves_human),
use.names = FALSE)
#inspect new waves variable
summary(study_data$waves)
sd(study_data$waves)
sd(study_data$waves, na.rm=T)
#inspect new waves variable
print(summary(study_data$waves))
print(sd(study_data$waves, na.rm=T))
#sd 81.64826
print(sd(study_data$waves, na.rm=T)) #sd
#inspect new waves variable
print(summary(study_data$waves)) #sd  81.64826
View(study_data)
survey_data <- list()
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
#check if questionnaire data is available for current row
valid <- isValidJSON(study_data$questionnaire.answers[i], TRUE)
#add data to list
if(valid){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i]] <- as.data.frame(participant_answers)
#or note missingness
}else{
survey_data[[i]] <-data.frame("missing_survey" = TRUE)
}
}
#combine all questionnaire answers into one dataframe (rows = participants; columns = questions)
survey_data <- rbind.fill(survey_data)
View(survey_data)
lapply(survey_data, summary)
View(survey_data)
survey_data$Ik_voelde_dat_ik_controle_had_tijdens_het_spel_
for(clm in 1:ncol(survey_data)){
c = as.numeric(survey_data[,clm])
summary(c)
}
print(summary(c))
for(clm in 1:ncol(survey_data)){
c = as.numeric(survey_data[,clm])
print(summary(c))
}
print(colnames(survey_data)[clm])
for(clm in 1:ncol(survey_data)){
c = as.numeric(survey_data[,clm])
print(colnames(survey_data)[clm])
print(summary(c))
}
for(clm in 1:ncol(survey_data)){
c = as.numeric(survey_data[,clm])
print(colnames(survey_data)[clm])
print(summary(c))
print(sd(c, na.rm = T))
}
library(plyr)
library(dplyr)
library(ggplot2)
library(pander)
library(scales)
library(RJSONIO)
library(jsonlite)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
distinct(scenario.id, scenario) %>%
pandoc.table()
pandoc.table(table(study_data$scenario))
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), color = 1, fill = "white") +
theme_bw() +
ggtitle("Data collection across time")
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), binwidth = 1*3600*24, color = 1, fill = "white") +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks="1 day", labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("20/09/2020 00:00",format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("24/09/2020 23:59",format="%d/%m/%Y %H:%M")
study_data <- study_data %>%
filter(between(dates, start, end))
paste(nrow(study_data), "paticipants left")
glimpse(study_data$user.id)
study_data %>%
mutate(sex = replace(sex, sex == "", "no response")) %>%
group_by(sex) %>%
mutate(group_count = n()) %>%
ungroup() %>%
mutate(sex_count = paste0(sex, "; n=", group_count)) %>%
ggplot() +
geom_density(aes(age)) +
facet_wrap(~sex_count) +
theme_bw() +
ggtitle("Demographics in example study")
study_data %>%
mutate(avatar = replace(avatar, avatar == "", "missing")) %>%
ggplot() +
geom_bar(aes(avatar), color = 1, fill = "white") +
theme_bw() +
ggtitle("Popularity of avatars in example study")
TRUNCATE <- 296
first_entry <- paste0(substr(study_data$play.events[1], 1, TRUNCATE), "]")
print(first_entry)
prettify(first_entry)
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
tail(all_data_participant1)
cat("Number thows")
pandoc.table((table(all_data_participant1$from)))
cat("\nNumber receptions")
pandoc.table(table(all_data_participant1$to))
all_data_participant1 %>%
filter(to == "0") %>%
pandoc.table()
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
#custom function for counting waves
count_waves_human <- function(play.events.cell){
#cannot count waves if no game was played
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)
}
#transform cell to df
cell_contents_df <- fromJSON(play.events.cell) %>% as.data.frame
#if no player waves, the 'player' column will be omitted
if(! "player" %in% colnames(cell_contents_df)){
return(0)
}
#otherwise simply count the occurrence of the target behavior
sum(cell_contents_df$type == "wave" & cell_contents_df$player == "0")
}
#count waves from all participants
study_data$waves <- unlist(lapply(study_data$play.events, count_waves_human),
use.names = FALSE)
#inspect new waves variable
print(summary(study_data$waves))
#sd(study_data$waves, na.rm = T)#  81.64826
survey_data <- list()
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
#check if questionnaire data is available for current row
valid <- isValidJSON(study_data$questionnaire.answers[i], TRUE)
#add data to list
if(valid){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i]] <- as.data.frame(participant_answers)
#or note missingness
}else{
survey_data[[i]] <-data.frame("missing_survey" = TRUE)
}
}
#combine all questionnaire answers into one dataframe (rows = participants; columns = questions)
survey_data <- rbind.fill(survey_data)
#copy in console
for(clm in 1:ncol(survey_data)){
c = as.numeric(survey_data[,clm])
print(colnames(survey_data)[clm])
print(summary(c))
print(sd(c, na.rm = T))
}
all_data <- cbind(study_data, survey_data)
felt_in_control <- as.numeric(all_data$Ik_voelde_dat_ik_controle_had_tijdens_het_spel_)
ggplot() +
geom_histogram(aes(felt_in_control), binwidth = 0.5, color = 1, fill = "white") +
theme_bw() +
labs(x = "feeling of control") +
ggtitle("'I felt that I had control during the game'",
subtitle = "orig: 'Ik voelde dat ik controle had tijdens het spel'")
library(ggstatsplot)
plot_data <- all_data %>%
rename(sadness = Ik_voelde_mij_verdrietig_tijdens_het_spel_) %>%
mutate(sadness = as.numeric(sadness)) %>%
select(sex, sadness) %>%
filter(sex != "")
ggbetweenstats(plot_data, sex, sadness)
#custom function for extracting timepoints
get_wave_timepoints <- function(play.events.cell){
#cannot get timepoints if no game was played
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)
}
#transform cell to df
cell_contents <- fromJSON(play.events.cell) %>% as.data.frame
#if no player waves, the 'player' column will be omitted
if(! "player" %in% colnames(cell_contents)){
return(0)
}
#otherwise simply count the occurrence of the target behavior
timepoints <- cell_contents$timestamp[cell_contents$type == "wave" &
cell_contents$player == "0"]
as.numeric(timepoints)
}
all_timepoints <- lapply(study_data$play.events, get_wave_timepoints)
get_endpoints <- function(play.events.cell){
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)}
cell_contents <- fromJSON(play.events.cell) %>% as.data.frame
endpoint <- cell_contents$timestamp[nrow(cell_contents)]
as.numeric(endpoint)
}
all_endpoints <- lapply(study_data$play.events, get_endpoints)
library(lattice)
library(patchwork)
make_plot<- function(index){
my_plot <- ggplot(NULL, aes(x = all_timepoints[[index]], y = ..density..)) +
xlim(c(0, all_endpoints[[index]])) +
geom_histogram(colour = 1, fill = "white") +
geom_density() +
labs(x = "Seconds into game") +
theme_bw() +
ggtitle(paste0("Participant ", index, " (", length(all_timepoints[[index]]), " waves)"))
return(my_plot)
}
selected_participants <- c(1:3,12)
my_plots = lapply(selected_participants, make_plot)
wrap_plots(my_plots)
last_waves <- sapply(all_timepoints, max)
all_data$times_btw_wave_and_end <- unlist(all_endpoints) - last_waves
all_data$felt_in_control <- as.numeric(all_data$Ik_voelde_dat_ik_controle_had_tijdens_het_spel_)
plot_data <- all_data %>% filter(!is.na(felt_in_control) &
!is.infinite(felt_in_control) &
!is.na(times_btw_wave_and_end) &
!is.infinite(times_btw_wave_and_end))
ggscatterstats(plot_data, times_btw_wave_and_end, felt_in_control,
ggplot.component  = ggplot2::labs(x = "time betw. last wave and game end",
y = "feeling of control"))
