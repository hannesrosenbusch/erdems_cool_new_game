#s_data <- lapply(study_data$questionnaire.answers, fromJSON)
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i+1]] <- participant_answers
}
survey_data <- list()
#s_data <- lapply(study_data$questionnaire.answers, fromJSON)
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i+1]] <- participant_answers
}
study_data$questionnaire.answers[114]
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(jsonlite)
library(RJSONIO)
study_data <- read.csv2("socialball_CM_20210707.csv")
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(jsonlite)
library(RJSONIO)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(jsonlite)
library(RJSONIO)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
select(scenario.id, scenario) %>%
distinct(scenario.id, .keep_all = TRUE)
table(study_data$scenario)
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 30) +
theme_bw() +
ggtitle("Data collection across time")
my_limits  = as.POSIXct(c("15/09/2020 06:22", "30/09/2020 06:22"),format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 16) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  my_limits)
start <- as.POSIXct("20/09/2020 00:00",format="%d/%m/%Y %H:%M")
end <- as.POSIXct("24/09/2020 23:59",format="%d/%m/%Y %H:%M")
study_data <- study_data %>%
filter(between(dates, start, end))
paste(nrow(study_data), "paticipants left")
glimpse(study_data$user.id)
study_data %>%
mutate(sex = replace(sex, sex == "", "no response")) %>%
group_by(sex) %>%
mutate(group_count = n()) %>%
ungroup() %>%
mutate(sex_count = paste0(sex, "; n=", group_count)) %>%
ggplot() +
geom_density(aes(age)) +
facet_wrap(~sex_count)
study_data %>%
mutate(avatar = replace(avatar, avatar == "", "missing")) %>%
ggplot() +
geom_bar(aes(avatar)) +
theme_bw() +
ggtitle("Popularity of avatars in example study")
TRUNCATE <- 296
first_entry <- paste0(substr(study_data$play.events[1], 1, TRUNCATE), "]")
print(first_entry)
prettify(first_entry)
all_data_player1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
study_data <- read.csv2("socialball_CM_20210707.csv")
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(jsonlite)
library(RJSONIO)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
select(scenario.id, scenario) %>%
distinct(scenario.id, .keep_all = TRUE)
table(study_data$scenario)
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 30) +
theme_bw() +
ggtitle("Data collection across time")
my_limits  = as.POSIXct(c("15/09/2020 06:22", "30/09/2020 06:22"),format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 16) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  my_limits)
start <- as.POSIXct("20/09/2020 00:00",format="%d/%m/%Y %H:%M")
end <- as.POSIXct("24/09/2020 23:59",format="%d/%m/%Y %H:%M")
study_data <- study_data %>%
filter(between(dates, start, end))
paste(nrow(study_data), "paticipants left")
glimpse(study_data$user.id)
study_data %>%
mutate(sex = replace(sex, sex == "", "no response")) %>%
group_by(sex) %>%
mutate(group_count = n()) %>%
ungroup() %>%
mutate(sex_count = paste0(sex, "; n=", group_count)) %>%
ggplot() +
geom_density(aes(age)) +
facet_wrap(~sex_count)
study_data %>%
mutate(avatar = replace(avatar, avatar == "", "missing")) %>%
ggplot() +
geom_bar(aes(avatar)) +
theme_bw() +
ggtitle("Popularity of avatars in example study")
TRUNCATE <- 296
first_entry <- paste0(substr(study_data$play.events[1], 1, TRUNCATE), "]")
print(first_entry)
prettify(first_entry)
all_data_player1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
all_data_player1 <- jsonlite::fromJSON(study_data$play.events[1]) %>% as.data.frame
tail(all_data_player1)
cat("Number thows")
print(table(all_data_player1$from))
cat("\nNumber receptions")
table(all_data_player1$to)
all_data_player1 %>% filter(to == "0")
human_activity_player1 <- all_data_player1 %>% filter(player == "0")
print(human_activity_player1)
#custom function for counting waves
count_waves_human <- function(play.events.cell){
#cannot count waves if no game was played
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)
}
#transform cell to df
cell_contents_df <- fromJSON(play.events.cell) %>% as.data.frame
#if no player waves, the 'player' column will be omitted
if(! "player" %in% colnames(cell_contents_df)){
return(0)
}
#otherwise simply count the occurrence of the target behavior
sum(cell_contents_df$type == "wave" & cell_contents_df$player == "0")
}
#count waves from all participants
study_data$waves <- unlist(lapply(study_data$play.events, count_waves_human), use.names = FALSE)
#custom function for counting waves
count_waves_human <- function(play.events.cell){
#cannot count waves if no game was played
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)
}
#transform cell to df
cell_contents_df <- jsonlite::fromJSON(play.events.cell) %>% as.data.frame
#if no player waves, the 'player' column will be omitted
if(! "player" %in% colnames(cell_contents_df)){
return(0)
}
#otherwise simply count the occurrence of the target behavior
sum(cell_contents_df$type == "wave" & cell_contents_df$player == "0")
}
#count waves from all participants
study_data$waves <- unlist(lapply(study_data$play.events, count_waves_human), use.names = FALSE)
#inspect new waves variable
summary(study_data$waves)
survey_data <- list()
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
#check if questionnaire data is available for current row
valid <- isValidJSON(study_data$questionnaire.answers[i], TRUE)
#add data to list
if(valid){
participant_answers <- jsonlite::fromJSON(study_data$questionnaire.answers[i])
survey_data[[i]] <- as.data.frame(participant_answers)
#or add NA to list
}else{
survey_data[[i]] <-data.frame(NA)
}
}
#combine all questionnaire answers into one dataframe (rows = participants; columns = questions)
survey_data <- rbind.fill(survey_data)
survey_data$NA. <- NULL
all_data <- cbind(study_data, survey_data)
felt_in_control <- as.numeric(all_data$Ik_voelde_dat_ik_controle_had_tijdens_het_spel_)
ggplot() +
geom_histogram(aes(felt_in_control)) +
theme_bw() +
ggtitle("'I felt that I had control during the game'", subtitle = "orig: 'Ik voelde dat ik controle had tijdens het spel'")
study_data %>%
distinct(scenario.id, .keep_all = FALSE)
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(jsonlite)
library(RJSONIO)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
distinct(scenario.id, .keep_all = FALSE)
study_data %>%
distinct(scenario.id, scenario, .keep_all = FALSE)
study_data %>%
distinct(scenario.id, scenario)
library(pander)
install.packages("pander")
pandoc.table(study_data$scenario,style = 'rmarkdown')
library(pander)
pandoc.table(table(study_data$scenario),style = 'rmarkdown')
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(RJSONIO)
library(jsonlite)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
distinct(scenario.id, scenario)
library(pander)
pandoc.table(table(study_data$scenario),style = 'rmarkdown')
study_data %>%
distinct(scenario.id, scenario) %>%
pandoc.table()
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
theme_bw() +
ggtitle("Data collection across time")
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
pandoc.table(tail(all_data_participant1))
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
tail(all_data_participant1)
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
pandoc.table(tail(all_data_participant1))
cat("Number thows")
pandoc.table((table(all_data_participant1$from)))
cat("\nNumber receptions")
pandoc.table(table(all_data_participant1$to))
all_data_participant1 %>%
filter(to == "0") %>%
pandoc.table()
human_activity_participant1 <- all_data_participant1 %>% filter(player == "0")
pandoc.table(human_activity_participant1)
human_activity_participant1 <- all_data_participant1 %>% filter(player == "0")
print(human_activity_participant1)
library(plyr)
library(dplyr)
library(ggplot2)
library(pander)
library(scales)
library(RJSONIO)
library(jsonlite)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
distinct(scenario.id, scenario) %>%
pandoc.table()
pandoc.table(table(study_data$scenario))
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
theme_bw() +
ggtitle("Data collection across time")
my_limits  = as.POSIXct(c("15/09/2020 06:22", "30/09/2020 06:22"),format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 16) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  my_limits)
start <- as.POSIXct("20/09/2020 00:00",format="%d/%m/%Y %H:%M")
end <- as.POSIXct("24/09/2020 23:59",format="%d/%m/%Y %H:%M")
study_data <- study_data %>%
filter(between(dates, start, end))
paste(nrow(study_data), "paticipants left")
glimpse(study_data$user.id)
study_data %>%
mutate(sex = replace(sex, sex == "", "no response")) %>%
group_by(sex) %>%
mutate(group_count = n()) %>%
ungroup() %>%
mutate(sex_count = paste0(sex, "; n=", group_count)) %>%
ggplot() +
geom_density(aes(age)) +
facet_wrap(~sex_count) +
theme_bw() +
ggtitle("Demographics in example study")
study_data %>%
mutate(avatar = replace(avatar, avatar == "", "missing")) %>%
ggplot() +
geom_bar(aes(avatar)) +
theme_bw() +
ggtitle("Popularity of avatars in example study")
TRUNCATE <- 296
first_entry <- paste0(substr(study_data$play.events[1], 1, TRUNCATE), "]")
print(first_entry)
prettify(first_entry)
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
tail(all_data_participant1)
cat("Number thows")
pandoc.table((table(all_data_participant1$from)))
cat("\nNumber receptions")
pandoc.table(table(all_data_participant1$to))
all_data_participant1 %>%
filter(to == "0") %>%
pandoc.table()
human_activity_participant1 <- all_data_participant1 %>% filter(player == "0")
print(human_activity_participant1)
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table(style = "simple")
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
library(plyr)
library(dplyr)
library(ggplot2)
library(pander)
library(scales)
library(RJSONIO)
library(jsonlite)
study_data <- read.csv2("socialball_CM_20210707.csv")
dim(study_data)
names(study_data)
study_data %>%
distinct(scenario.id, scenario) %>%
pandoc.table()
pandoc.table(table(study_data$scenario))
study_data$dates <- as.POSIXct(study_data$date,format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
theme_bw() +
ggtitle("Data collection across time")
my_limits  = as.POSIXct(c("15/09/2020 06:22", "30/09/2020 06:22"),format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 16) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  my_limits)
start <- as.POSIXct("20/09/2020 00:00",format="%d/%m/%Y %H:%M")
end <- as.POSIXct("24/09/2020 23:59",format="%d/%m/%Y %H:%M")
study_data <- study_data %>%
filter(between(dates, start, end))
paste(nrow(study_data), "paticipants left")
glimpse(study_data$user.id)
study_data %>%
mutate(sex = replace(sex, sex == "", "no response")) %>%
group_by(sex) %>%
mutate(group_count = n()) %>%
ungroup() %>%
mutate(sex_count = paste0(sex, "; n=", group_count)) %>%
ggplot() +
geom_density(aes(age)) +
facet_wrap(~sex_count) +
theme_bw() +
ggtitle("Demographics in example study")
study_data %>%
mutate(avatar = replace(avatar, avatar == "", "missing")) %>%
ggplot() +
geom_bar(aes(avatar)) +
theme_bw() +
ggtitle("Popularity of avatars in example study")
TRUNCATE <- 296
first_entry <- paste0(substr(study_data$play.events[1], 1, TRUNCATE), "]")
print(first_entry)
prettify(first_entry)
all_data_participant1 <- fromJSON(study_data$play.events[1]) %>% as.data.frame
tail(all_data_participant1)
cat("Number thows")
pandoc.table((table(all_data_participant1$from)))
cat("\nNumber receptions")
pandoc.table(table(all_data_participant1$to))
all_data_participant1 %>%
filter(to == "0") %>%
pandoc.table()
all_data_participant1 %>%
filter(player == "0") %>%
pandoc.table()
#custom function for counting waves
count_waves_human <- function(play.events.cell){
#cannot count waves if no game was played
if(play.events.cell == "null" | play.events.cell == ""){
return(NA)
}
#transform cell to df
cell_contents_df <- fromJSON(play.events.cell) %>% as.data.frame
#if no player waves, the 'player' column will be omitted
if(! "player" %in% colnames(cell_contents_df)){
return(0)
}
#otherwise simply count the occurrence of the target behavior
sum(cell_contents_df$type == "wave" & cell_contents_df$player == "0")
}
#count waves from all participants
study_data$waves <- unlist(lapply(study_data$play.events, count_waves_human), use.names = FALSE)
#inspect new waves variable
summary(study_data$waves)
survey_data <- list()
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
#check if questionnaire data is available for current row
valid <- isValidJSON(study_data$questionnaire.answers[i], TRUE)
#add data to list
if(valid){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i]] <- as.data.frame(participant_answers)
#or add NA to list
}else{
survey_data[[i]] <-data.frame(NA)
}
}
#combine all questionnaire answers into one dataframe (rows = participants; columns = questions)
survey_data <- rbind.fill(survey_data)
survey_data <- sapply(survey_data, function(x)all(is.na(x)))
#survey_data$NA. <- NULL
survey_data <- list()
#explicitly iterate over rows
for(i in 1:nrow(study_data)){
#check if questionnaire data is available for current row
valid <- isValidJSON(study_data$questionnaire.answers[i], TRUE)
#add data to list
if(valid){
participant_answers <- fromJSON(study_data$questionnaire.answers[i])
survey_data[[i]] <- as.data.frame(participant_answers)
#or add NA to list
}else{
survey_data[[i]] <-data.frame("Missing_data" = TRUE)
}
}
#combine all questionnaire answers into one dataframe (rows = participants; columns = questions)
survey_data <- rbind.fill(survey_data)
View(survey_data)
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), bins = 16) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(date_breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks=("1 day"), labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates)) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks="1 day", labels=date_format("%d/%m"), limits =  c(start, end))
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), binwidth = binwidth = 1*3600*24) +
start <- as.POSIXct("15/09/2020 06:22", format="%d/%m/%Y %H:%M")
end   <- as.POSIXct("30/09/2020 06:22", format="%d/%m/%Y %H:%M")
ggplot(study_data) +
geom_histogram(aes(dates), binwidth = 1*3600*24) +
ggtitle("Data collection across time (September 2020)") +
theme_bw() +
scale_x_datetime(breaks="1 day", labels=date_format("%d/%m"), limits =  c(start, end))
library(devtools)
install.packages("devtools")
library(devtools)
install_github("https://github.com/salim-b/pkgpurl")
library(pkgpurl)
setwd("~/Projects/socialball erdem")
lint_rmd("markdown for erdem")
lint_rmd("markdown for erdem.Rmd")
install.packages("PMCMRPlus")
install.packages("PMCMRplus")
install.packages("ggside")
